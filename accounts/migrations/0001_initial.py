# Generated by Django 4.0 on 2023-03-08 06:10

import accounts.models
import accounts.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import imagekit.models.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('email', models.EmailField(max_length=60, unique=True, verbose_name='email')),
                ('fullname', models.CharField(help_text='Full Name', max_length=200)),
                ('username', models.CharField(help_text='Username should be unique', max_length=200)),
                ('gender', models.CharField(choices=[('MALE', 'MALE'), ('FEMALE', 'FEMALE'), ('OTHERS', 'OTHERS')], max_length=10)),
                ('contact_number', models.CharField(blank=True, help_text='Supported Formats: +8801757551134, 8801757871165 or 01715604232', max_length=14, validators=[django.core.validators.RegexValidator('^(?:\\+?88)?01[3-9]\\d{8}$', message='Contact number must be entered in following formats: +8801757551134, 8801857871165 or 01915604232')])),
                ('avatar', imagekit.models.fields.ProcessedImageField(default='default/default_avatar.jpg', upload_to=accounts.models.Account.get_account_avatar_file_path, validators=[django.core.validators.FileExtensionValidator(['jpg', 'png']), accounts.validators.validate_account_avatar_file_size])),
                ('bio', models.TextField(blank=True, help_text='account owner bio', max_length=400)),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('last_login', models.DateTimeField(auto_now=True, verbose_name='last login')),
                ('updated_at', models.DateTimeField(auto_now_add=True)),
                ('is_student', models.BooleanField(default=False, help_text='Designates whether the user is student or not.', verbose_name='student status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designate whether this user should be treated as active.                                Unselect this instead of deleting accounts', verbose_name='active')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email_confirmed', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Accounts',
                'verbose_name_plural': 'Accounts',
            },
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address_line', models.CharField(help_text='Road/Village/Town/House Info', max_length=255)),
                ('district', models.CharField(help_text='District Name', max_length=100)),
                ('upazilla', models.CharField(help_text='Upazilla Name', max_length=100)),
                ('postal_code', models.IntegerField(blank=True, validators=[django.core.validators.MinValueValidator(1000), django.core.validators.MaxValueValidator(9350)])),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='account_address', to='accounts.account')),
            ],
        ),
    ]
